package uwu.victoraso.storeapp.repositories.productsimport com.google.firebase.firestore.FirebaseFirestoreimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.tasks.awaitimport uwu.victoraso.storeapp.model.Productimport javax.inject.Injectimport javax.inject.Singleton@Singletonclass ProductDataSource @Inject constructor(    private val db: FirebaseFirestore) {    /**     * Get product details by productID     */    fun getProductDetailsById(productId: Long): Flow<Product> = flow {        var product = Product()        db.collection("products")            .whereEqualTo("id", productId)            .get()            .addOnSuccessListener {                for (doc in it) {                    product = doc.toObject(Product::class.java)                }            }            .addOnFailureListener {            }            .await()        emit(product)    }    fun getMainList(): Flow<List<Product>> = flow {        val productList = ArrayList<Product>()        db.collection("products")//            .whereEqualTo("id", 1)            .get()            .addOnSuccessListener {                for (doc in it) {                    productList.add(doc.toObject(Product::class.java))                }            }            .addOnFailureListener {            }            .await()        emit(productList)    }    /**     * Get products by category stored in StoreApp FireStore Database     */    fun getProductsByCategory(category: String): Flow<List<Product>> = flow {        val productList = ArrayList<Product>()        db.collection("products")            .whereEqualTo("category", category)            .get()            .addOnSuccessListener {                for (doc in it) {                    productList.add(doc.toObject(Product::class.java))                }            }            .addOnFailureListener {            }            .await()        emit(productList)    }    /**     * Get products input text stored in StoreApp FireStore Database.     * Firebase Datastore is case sensitive, I cannot search ignoring the lower and upper cases     */    fun getProductsByInputText(inputText: String): Flow<List<Product>> = flow {        val productList = ArrayList<Product>()        db.collection("products")            .orderBy("nameLowercase")            .startAt(inputText.lowercase())            .endAt("${inputText.lowercase()}~")            .limit(20L)            .get()            .addOnSuccessListener {                for (doc in it) {                    productList.add(doc.toObject(Product::class.java))                }            }            .addOnFailureListener {            }            .await()        emit(productList)    }    /**     * Get products by id in StoreApp FireStore Database     */    fun getProductsByIds(productIds: List<Long>): Flow<List<Product>> = flow {        val productList = ArrayList<Product>()        for (id in productIds) {            db.collection("products")                .whereEqualTo("id", id)                .get()                .addOnSuccessListener {                    for (doc in it) {                        productList.add(doc.toObject(Product::class.java))                    }                }                .addOnFailureListener {                }                .await()        }        emit(productList)    }    fun addNewProduct(product: Product): Boolean {        try {            db.collection("products").document(product.id.toString()).set(product)            ProductRepository.lastIndex += 1            return true        } catch (e: Exception) {            e.printStackTrace()        }        return false    }}